import express, { type Express, type Request, type Response } from "express";
import { createServer, type Server } from "http";
import { setupAuth } from "./auth";
import { storage } from "./storage";
import path from "path";

// Create an Express router instance
const router = express.Router();

export async function registerRoutes(app: Express): Promise<Server> {
  console.log("[ROUTES] Starting route registration");

  try {
    // Setup authentication first
    console.log("[ROUTES] Setting up authentication");
    setupAuth(app);

    // Serve static files from uploads directory
    const uploadsPath = path.join(process.cwd(), 'uploads');
    app.use('/uploads', express.static(uploadsPath));

    // Basic middleware setup with logging
    console.log("[ROUTES] Setting up core middleware");
    app.use(express.json());
    app.use(express.urlencoded({ extended: false }));
    
    // Configure and register all routes before creating HTTP server
    console.log("[ROUTES] Configuring API routes");
    app.use('/api', router);

    // Health check endpoint
    router.get("/status", (_req: Request, res: Response) => {
      console.log("[ROUTES] Health check requested");
      res.json({ 
        status: "ok",
        timestamp: new Date().toISOString()
      });
    });

    // Create HTTP server
    console.log("[ROUTES] Creating HTTP server");
    const httpServer = createServer(app);

    console.log("[ROUTES] Route registration completed successfully");
    return httpServer;
  } catch (error) {
    console.error("[ROUTES] Error during route registration:", error);
    throw error;
  }
}